---
title: "Grand Tour Project"
jupyter: python3
execute: 
  freeze: auto
  echo: false
format:
  html:
    code-fold: true
image: "data/grand-tour.png"
multipleLeads: false
lead:
  - name: Giovanna Ceserani
    designation: Faculty Director of CESTA and Associate Professor of Classics
multipleInterns: false
intern:
  - name: Raagavi Ragothaman
    quarter: Summer, 2023
---
## Project Description
In the 18th century, thousands of Northern Europeans traveled to Italy for a journey of cultural and symbolic capital that they called the Grand Tour. These travels were a formative institution of modernity and contributed to a massive reimagining of politics and the arts, ideas about leisure, the market for culture, and the practices of professionalism. Since 2008, the Grand Tour Project (grandtour.stanford.edu) has generated digital tools, analyses, and visualizations to bring us closer to the diverse travelers who collectively represent 18th-century travel to Italy. We have been digitizing and enhancing John Ingamells’ Dictionary of British and Irish Travelers to Italy 1701-1800 to create a searchable database of more than six thousand entries. This past year the project’s focus has been on preparing this interactive database and an accompanying digital volume for publication with the title A World Made by Travel: The Digital Grand Tour for the Stanford University Press Digital Series. CESTA intern alumni Ashwin Ramaswami and Ryan Tan returned to the project to work on this exciting phase as we refined both development and design to satisfy the press’s guidelines, anonymous reviewers’ comments, digital accessibility, and best practices for digital sustainability and preservation. Raagavi Ragothaman, a CS coterm master’s student, also contributed in crucial ways, focusing on interactivity features and data visualizations.

For the project’s publication, we wanted to communicate immediately and clearly how the data for the more than six thousand travelers in the database is not only incomplete but also that this incompleteness is unevenly distributed. For any one traveler, we might have a lot of data about their journey but very little about their life—maybe not even their date of birth. We used the parallel sets visualization (originally created using Titanic passengers’ data) to convey this information showing at once the correlations among five dimensions across the entire database: 1) whether we had data about travelers’ dates of birth and death, 2) about their occupation and education, 3) the gender of the travelers, 4) how many data points (visits) we had for their journeys, and, finally, 5) whether the travelers’ entries were found in the original Dictionary, or if we newly created their entries in the course of the project as we recovered forgotten travelers.

```{ojs}
d3 = require("d3@6", "d3-sankey@0.12")
```

```{ojs}
width = 975
```

```{ojs}
height = 720
```

```{ojs}
keys = ["gender", "dates", "origin", "events", "travels"]
```

```{ojs}
data = d3.csvParse(await FileAttachment("data/data_new_gte (2)@2.csv").text(), d3.autoType)
```


```{ojs}
sankey = d3.sankey()
    .nodeSort(null)
    .linkSort(null)
    .nodeWidth(4)
    .nodePadding(20)
    .extent([[0, 5], [width, height - 5]])
```

```{ojs}
colorScale = d3.scaleOrdinal(["Male", "Female"], ["#ACD1AF","#FFC000"]).unknown("#ccc")
```

```{ojs}
graph = {
  let index = -1;
  const nodes = [];
  const nodeByKey = new Map;
  const indexByKey = new Map;
  const links = [];

  for (const k of keys.slice(1)) {
    for (const d of data) {
      const key = JSON.stringify([k, d[k]]);
      if (nodeByKey.has(key)) continue;
      const node = {name: d[k], key: k};
      nodes.push(node);
      nodeByKey.set(key, node);
      indexByKey.set(key, ++index);
    }
  }

  for (let i = 2; i < keys.length; ++i) {
    const a = keys[i - 1];
    const b = keys[i];
    const prefix = keys.slice(0, i + 1);
    const linkByKey = new Map;
    for (const d of data) {
      const names = prefix.map(k => d[k]);
      const key = JSON.stringify(names);
      const value = d.value || 1;
      let link = linkByKey.get(key);
      if (link) { link.value += value; continue; }
      link = {
        source: indexByKey.get(JSON.stringify([a, d[a]])),
        target: indexByKey.get(JSON.stringify([b, d[b]])),
        names,
        value
      };
      links.push(link);
      linkByKey.set(key, link);
    }
  }

  return {nodes, links};
}
```

```{ojs}
chart = {
  const axis_name = {
    "dates": "Has biographical dates?",
    "origin": "Source of the entry",
    "events": "Has occupation/education data?",
    "travels": "No. of visits to places"
  }
  const colorAxisLabels = {
  "Male": "Men",
  "Female": "Women",
  "Unknown": "Unknown"
};
  
  const svg = d3.create("svg")
      .attr("viewBox", [0, -15, width, height+45]);

  const { nodes, links } = sankey({
    nodes: graph.nodes.map(d => Object.assign({}, d)),
    links: graph.links.map(d => Object.assign({}, d))
  });

  const link = svg.append("g")
    .attr("fill", "none")
    .selectAll("g")
    .data(links)
    .join("g");

  // Set up the links
  link.append("path")
    .attr("d", d3.sankeyLinkHorizontal())
    .attr("stroke", d => colorScale(d.names[0]))
    .attr("stroke-width", d => d.width)
    .style("mix-blend-mode", "multiply")
    .style("opacity", 1) // Set initial opacity to 1

link.append("title")
  .text(d => `${d.names.join(" → ")}\n${d.value.toLocaleString()}`);

// Add color axis label

  function changeLinks(link, d) {
    link.style("opacity", linkData => (linkData === d ? 1 : 0.2));
    // Set opacity of ancestors and children links to 1
    setAncestorLinksOpacity(d, 1);
    setDescendantLinksOpacity(d, 1);

  }

  // Event listeners for link hover
  link.on("mouseover", function (event, d) {
    changeLinks(link, d);

  })
    .on("mouseout", function () {
      link.style("opacity", 1);
    });

  // Function to set opacity of ancestor links
  function setAncestorLinksOpacity(d, opacity) {
    link.filter(linkData => isAncestorLink(linkData, d)).style("opacity", opacity);
  }

  // Function to set opacity of descendant links
  function setDescendantLinksOpacity(d, opacity) {
    link.filter(linkData => isDescendantLink(linkData, d)).style("opacity", opacity);
  }

  // Function to check if link is an ancestor link
  function isAncestorLink(linkData, d) {
    let flag = true
    for (let i = 0; i < linkData.names.length; ++i) {
      if (linkData.names[i] !== d.names[i]) 
        flag = false;
    }
    return flag;
  }

  // Function to check if link is a descendant link
  function isDescendantLink(linkData, d) {
    let flag = true
    for (let i = 0; i < d.names.length; ++i) {
      if (linkData.names[i] !== d.names[i]) 
        flag = false;
    }
    return flag;
  }

  svg.append("g")
    .selectAll("rect")
    .data(nodes)
    .join("rect")
    .attr("x", d => d.x0)
    .attr("y", d => d.y0)
    .attr("height", d => d.y1 - d.y0)
    .attr("width", d => d.x1 - d.x0)
    .append("title")
    .text(d => `${d.name}\n${d.value.toLocaleString()}`);
  
  
  svg.append("g")
    .selectAll("legend")
    .data(Object.keys(colorAxisLabels))
    .join("rect")
    .attr("fill", d => colorScale(d))
    .attr("opacity", 0.4)
    .attr("x", function(d,i){ return (width / 3 * i) + ((width/6)-50)})
    .attr("y", d => height)
    .attr('rx', 5)
    .attr('z', -100)
    .attr("height", 22)
    .attr("width", 100)
    
  .join('g')

    svg.append("g")
    .style("font", "13px serif")
    .style("font-weight", "bold")
    .selectAll("text")
    .data(Object.keys(colorAxisLabels))
    .attr("class", "legend-item")
    .join("text")
    .attr("x", function(d,i){ return (width / 3 * i) + (width/6)})
    .attr("y", d => height+10)
    .attr("dy", "0.35em")
    .attr("text-anchor", "middle")
    .text(d => colorAxisLabels[d])


  svg.append("g")
    .style("font", "13px serif")
    .style("font-weight", "bold")
    .selectAll("text")
    .data(nodes)
    .join("text")
    .attr("x", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
    .attr("y", d => -10)
    .attr("dy", "0.35em")
    .attr("text-anchor", d => d.key == 'origin' || d.key == 'events' ? "middle" :  d.key == 'dates' ? "start": "end" )
    .text(d => axis_name[d.key])

  svg.append("g")
    .style("font", "10px sans-serif")
    .selectAll("text")
    .data(nodes)
    .join("text")
    .attr("x", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
    .attr("y", d => (d.y1 + d.y0) / 2)
    .attr("dy", "0.35em")
    .attr("text-anchor", d => d.x0 < width / 2 ? "start" : "end")
    .text(d => d.name)
    .append("tspan")
    .attr("fill-opacity", 0.7)
    .text(d => ` ${d.value.toLocaleString()}`);

  return svg.node();
}

```
The parallel sets offer an interactive visualization: by hovering over the various curved sections, the reader can appreciate how specific dimensions correlate in the database. This screenshot shows that by hovering on the yellow fine curved line in the last panel, you see that there are twelve women in the database for whom we have both birth and death dates, who had entries in the original Dictionary, and who are among the 2% of travelers for whom we have data for between 26 and 74 visits during their journeys.

![Demonstration of the tool](data/raagavi-demo.jpg)
Raagavi in a data analysis and visualization session discussing an early version of the parallel sets visualization with digital design professor Michele Graffieti, who visited CESTA last spring from DensityDesign Lab at the Italian Politecnico University of Milan—the best work happens collaboratively!